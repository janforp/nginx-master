一. 概述

Nginx是一个高性能。支持高并发的，轻量级的webserver。眼下，Apache依旧webserver中的老大，可是在全球前1000大的webserver中，Nginx的份额为22.4%。Nginx採用模块化的架构，官方版本号的Nginx中大部分功能都是通过模块方式提供的，比方Http模块、Mail模块等。通过开发模块扩展Nginx，能够将Nginx打造成一个全能的应用server，这样能够将一些功能在前端Nginx反向代理层解决，比方登录校验、js合并、甚至数据库訪问等等。     可是，Nginx模块需要用C开发，并且必须符合一系列复杂的规则。最重要的用C开发模块必需要熟悉Nginx的源码。使得开发人员对其望而生畏。淘宝的agentzh和chaoslawful开发的ngx_lua模块通过将lua解释器集成进Nginx。能够採用lua脚本实现业务逻辑，因为lua的紧凑、高速以及内建协程，所以在保证高并发服务能力的同一时候极大地减少了业务逻辑实现成本。
    本文向大家介绍ngx_lua，以及我在使用它开发项目的过程中遇到的一些问题。

二. 准备

首先，介绍一下Nginx的一些特性，便于后文介绍ngx_lua的相关特性。



Nginx进程模型

Nginx採用多进程模型，单Master—多Worker，由Master处理外部信号、配置文件的读取及Worker的初始化。Worker进程採用单线程、非堵塞的事件模型（Event Loop，事件循环）来实现port的监听及client请求的处理和响应，同一时候Worker还要处理来自Master的信号。

因为Worker使用单线程处理各种事件。所以一定要保证主循环是非堵塞的，否则会大大减少Worker的响应能力。



Nginx处理Http请求的过程

表面上看，当Nginx处理一个来自client的请求时，先依据请求头的host、ip和port来确定由哪个server处理，确定了server之后，再依据请求的uri找到相应的location。这个请求就由这个location处理。
实际Nginx将一个请求的处理划分为若干个不同阶段（phase）。这些阶段依照前后顺序依次运行。也就是说NGX_HTTP_POST_READ_PHASE在第一个，NGX_HTTP_LOG_PHASE在最后一个。
<span style="font-size:10px;">NGX_HTTP_POST_READ_PHASE,     //0读取请求phase
NGX_HTTP_SERVER_REWRITE_PHASE,//1这个阶段主要是处理全局的(server block)的rewrite
NGX_HTTP_FIND_CONFIG_PHASE,   //2这个阶段主要是通过uri来查找相应的location，然后依据loc_conf设置r的相应变量
NGX_HTTP_REWRITE_PHASE,       //3这个主要处理location的rewrite
NGX_HTTP_POST_REWRITE_PHASE,  //4postrewrite，这个主要是进行一些校验以及收尾工作。以便于交给后面的模块。

NGX_HTTP_PREACCESS_PHASE,     //5比方流控这样的类型的access就放在这个phase，也就是说它主要是进行一些比較粗粒度的access。


NGX_HTTP_ACCESS_PHASE,        //6这个比方存取控制，权限验证就放在这个phase，一般来说处理动作是交给以下的模块做的.这个主要是做一些细粒度的access
NGX_HTTP_POST_ACCESS_PHASE,   //7一般来说当上面的access模块得到access_code之后就会由这个模块依据access_code来进行操作
NGX_HTTP_TRY_FILES_PHASE,     //8try_file模块，就是相应配置文件里的try_files指令。可接收多个路径作为參数。当前一个路径的资源无法找到，则自己主动查找下一个路径
NGX_HTTP_CONTENT_PHASE,       //9内容处理模块
NGX_HTTP_LOG_PHASE            //10log模块

每一个阶段上能够注冊handler。处理请求就是执行每一个阶段上注冊的handler。Nginx模块提供的配置指令仅仅会一般仅仅会注冊并执行在当中的某一个处理阶段。

比方，set指令属于rewrite模块的，执行在rewrite阶段，deny和allow执行在access阶段。


子请求（subrequest）
事实上在Nginx 世界里有两种类型的“请求”。一种叫做“主请求”（main request），而还有一种则叫做“子请求”（subrequest）。 所谓“主请求”。就是由 HTTP client从 Nginx 外部发起的请求。比方。从浏览器訪问Nginx就是一个“主请求”。 而“子请求”则是由 Nginx 正在处理的请求在 Nginx 内部发起的一种级联请求。“子请求”在外观上非常像 HTTP 请求，但实现上却和 HTTP 协议乃至网络通信一点儿关系都没有。它是 Nginx 内部的一种抽象调用，目的是为了方便用户把“主请求”的任务分解为多个较小粒度的“内部请求”，并发或串行地訪问多个 location 接口。然后由这些 location 接口通力协作，共同完毕整个“主请求”。当然。“子请求”的概念是相对的，不论什么一个“子请求”也能够再发起很多其它的“子子请求”。甚至能够玩递归调用（即自己调用自己）。

当一个请求发起一个“子请求”的时候，依照 Nginx 的术语，习惯把前者称为后者的“父请求”（parent request）。

location /main {
    echo_location /foo;     # echo_location发送子请求到指定的location
    echo_location /bar;
}
location /foo {
    echo foo;
}
location /bar {
    echo bar;
}
输出：

$ curl location/main
$ foo   03.  bar

这里，main location就是发送2个子请求，分别到foo和bar。这就类似一种函数调用。

“子请求”方式的通信是在同一个虚拟主机内部进行的。所以 Nginx 核心在实现“子请求”的时候，就仅仅调用了若干个 C 函数，全然不涉及不论什么网络或者 UNIX 套接字（socket）通信。我们由此能够看出“子请求”的运行效率是极高的。

协程（Coroutine）
协程类似一种多线程，与多线程的差别有：

1. 协程并不是os线程，所以创建、切换开销比线程相对要小。

2. 协程与线程一样有自己的栈、局部变量等，可是协程的栈是在用户进程空间模拟的，所以创建、切换开销非常小。

3. 多线程程序是多个线程并发运行。也就是说在一瞬间有多个控制流在运行。而协程强调的是一种多个协程间协作的关系，仅仅有当一个协程主动放弃运行权，还有一个协程才干获得运行权，所以在某一瞬间，多个协程间仅仅有一个在运行。

4. 因为多个协程时仅仅有一个在执行，所以对于临界区的訪问不须要加锁。而多线程的情况则必须加锁。



5. 多线程程序因为有多个控制流。所以程序的行为不可控，而多个协程的运行是由开发人员定义的所以是可控的。

Nginx的每一个Worker进程都是在epoll或kqueue这种事件模型之上，封装成协程，每一个请求都有一个协程进行处理。这正好与Lua内建协程的模型是一致的，所以即使ngx_lua须要运行Lua，相对C有一定的开销，但依旧能保证高并发能力。